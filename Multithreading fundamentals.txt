Multithreading Fundamentals

Intro
Це історія про основи багатопоточного програмування, про розуміння базисних конструкцій що дадуть впевненість у їх використанні та вмінні створювати безпечні і ефективні та оптимізовані програми. Також це розповідь про те, як спростити собі життя при роботі з багатопоточністю.

API для багатопоточності з'явилося ще в С. Для Unix систем з підтримкою стандарту POSIX  це є бібліотека pthread, а в системі Windows є своє multithreading API. Обидві мають С інтерфейс. Пізніше API з'явилося в бібліотеці std, і це по суті С++ обгортка над вищевказаними бібліотеками залежно від платформи. Плюсовий код можна міксувати з платформенним, для цього std дозволяє отримувати native handle потоку. В даному огляді ви використовуватимемо C++ std.

Майже всі приклади будуть використовувати ранню версію стандарту С++11, бо власне більшість функціоналу додано в С++ саме в ньому, але будуть присутні частини новіших стандартів які цілком могли бути додані раніше, але з історичних причин цього не відбулося.

Матеріал буде подано саме на практичних прикладах. Всі приклади доступні на публічному репозиторії.

1. Thread

Базовим елементом є потік.
Потік це група функціоналу, частина програми, що може виконуватися паралельно чи умовно паралельно з основним її потоком. Роботою потоків, їх переключенням керує планувальник потоків, aka Thread Scheduler, який є частиною сучасної операційної системи. Також для ефективного використання багатопоточності центральний процесор має надавати аідповідну підтримку в розумвнні наявності підтримуваних команд,  регістрів, тощо.
Паралельність і псевдо паралельність. Кількість потоків визначається сотнями якщо не тисячами, що більше значно кількості ядер. Тобто потоки можуть працювати як чисто паралельно на різних ядрах, так і псевдо паралельно в межах одного ядра. Планувальник потоків буде здійснювати часте переключення з одного потоку на інший в процессі виконання. Це перемикання контексту може відбутися в будь який несинхронізований момент і через це поведінка і особливості буде дуже схожою, різниця буде лише в доступі до кешу, і на зараз ми вважатимемо ці явища тотожними.

create + join
#Sample 01.1.1

detach
#Sample 01.1.2

join or detach makes thread unjoinable
non joinable when not inited with functor

sleep, yield
#Sample 01.1.2

jthread
jthread є розширена весрія thread з C++20, з автоматичним джоін в деструкторі. Також може підтримувати stop request.
#Sample jthread

Також варто згадати про пріоритет потоків, і аффініті. С++ не має синтаксису для зміни приоритетів чи задання афініті, але більш низькорівненві API його мають. Потоки з більш високим пріоритет отриматимуть частіше час від планувальника. Афініті дозволяє лімітувати на яких ядрах може виконуватися процес. Один з небагатьох кейсів де може бути корисним native_handle. Це в принципі advanced topic і наразі деталі ми опустимо.

2. Основні підходи

Імхо найкраща аналогія багатопоточності це - багато працівників. Один працівник працює з мінімальними складнощами, може безпечно користуватися усіма ресурсами, працювати незалежно, але це буде повільно, і якщо є різнотипні задачі, то все буде ще складніше.

Тепер додамо в цю схему декілька працівників і подивимося що буде - результат тут і в багатопоточності приблизно однаковий - скоріше всього стане швидше, але час від часу щось йтиме не так і вони сваритимуться, якщо немає чітких правил і порядку взаємодії. 

2.1. Структуризація
Структуризація коду, тобто створення поведінки, що є складною чи навіть неможливою в реалізації без використання багатопоточного програмування.
Різнотипні задачі
context isolation?


2.2. Оптимізація
Друга причина - оптимізація задля максимально можливого використання багатоядерних потужностей.



Task optimization
#Sample 01.2.2 Parallel calculation


3. Problems

Все було б просто, якби не було складно. Нові потужні можливості як правило часто створюють нові мрачні головняки. Є ряд проблем, які суттєво ускладнюють життя.

3.1. Race condition
#Sample 02.1.1 concurrent cout

3.2. Data race
Доступ до ресурсу одночасно 

В першому прикладі ми читали дані хоч і з одного масиву, але по факту з різних його частин що не перетинаються, що по суті можна вважати окремими частинами. Також дані використовувалися в режимі читання. І це не викликало ніяких проблем. В простих випадках можна отримати переваги багатопоточності без проблем. Але одночасний доступ до одних і тих же даних з різних потоків може призвести до неочікуваних небажаних результатів.
Дані може бути пошкоджено, або результати обчислень виявляться некорректними. Варто зазначити, що це не розповсюджується на випадок якщо доступ до даних буде винятково в режимі читання.

Одночасний доступ для читання є безпечним. Одночасний доступ для читання та запису є небезпечним, і може призводити як до тимчасових проблем, так і до критичних.
Одночасний доступ для запису з декількох потоків з високою вірогідністю викличе критичні проблеми.

#Sample 02.1.2 concurrent_collection

3.3. probability

#Sample 02.1.3 counter.
Ми розуміємо що синхронізації немає, відповідно має бути проблема. Але в цьому ж треба переконатися. Проблема не репродюситься. Але ми її побачимо при кардинальному збільшенні кількості повторів.
Відповідно якщо ви робите багатопоточний код, і протестували його 100 чи навіть 1000 разів це ще не гарантує його коректності. З дуже низьким репродюсом це лотерея. Код може бути протестований і піти в продакшн і бути знайденим лише згодом. Автоматичне тестування є обов'язковим, з повторами в 10к разів. Випадок з тред пулом. Закриття баги після репродюсу 10/10. 
1000 on try 999999 failed 125
0,000125

При використанні дебагера або додаванні логів репродюс може падати ще більше або навіть зникати через змінені часові рамки, хоча може і навпаки збільшитися залежно від випадку.

3.3. Складність розуміння
#Sample 01.2.2.parallel_calculation_sequence.plantuml


4. Synchronization 
Розглянемо основні способи вирішення конкурентного доступу до загальних ресурсів.

4.1.
mutex/recursive_mutex/shared mutex
Найпростішим синхронізуючим елементом є мютекс. Mutex розшифровується як mutual exclusion, в перекладі взаємовиключення.

Мютекс це щось на зразок talking stick. Є група людей, між ними лежить такий собі прапорець, який будь-хто може взяти.  Говорити може тільки той, хто першим взяв прапорець. Після закінчення користувач повертає прапорець назад, де його може знову взяти кожен. Коли прапорця немає то наступний може чекати поки звільниться ну або займатися іншими справами.

Також дуже ефективним аналогом буде замок з таблом на вбиральні в потязі чи літаку, коли ви підходите і бачите статус зайнято, можете прийняти рішення чекати, чи займатися іншими справами. 

Дуже ясна аналогія в обох випадках якщо не додати синхронізацію, то може бути гвалт і крик або конфуз.

при очікуванні мютексу потік засинає

Маючи методи lock() / unlock(), використовується lock() для позначення початку синхронізованої секції, і unlock() для її закінчення. При спробі lock() вже захопленого мютекса метод буте чекати звільнення попереднього захоплення, тобто виконання відповідного коду, після чого відбудеться наступне захоплення.
Згідно стандарту unlock() має бути викликаний тим же потоком, що останній робив успішний lock();
Присутній метод try_lock() для перевірки статусу, але при неможливості захоплення ресурсу повертає false замість очікування.

//
Мютекси загалом можуть бути іменовані і використовуватися для між процесної взаємодії для доступу до загальних ресурсів,

Часто в літературі синхронізований шматок коду називається критичною секцією. Хоча в Windows API є явна конструкція з такою назвою, яка по суті є "швидким мютексом". Вона працює швидше за рахунок того, що не може бути використана для міжпроцесної взаємодії.
//

recursive_mutex дозволяє повторне захоплення одним й тим самим потоком, що часто буває зручно.

shared_mutex (C++17) або ж shared_timed_mutex (C++14).
В додаток до ексклюзивного блокування, є спільне блокування, яке на відміну від ексклюзивного допускає декілька одночасних захоплень.
Найпростіше це зрозуміти через його ішну назву. В pthread є примітив rwlock, тобто read write lock, який має методи rdlock() та wrlock(), тобто захоплення для читання та запису. Очевидно захоплення для читання буде менш строгим і дозволятиме декілька читачів одночасно, що відповідає С++ shared_lock(). Відповідно просто lock() буде відповідником захопленням для запису і є ексклюзивним.
В winapi такого примітиву немає, можна знайти кастомні реалізації.

Шаред мютекс дозволяє читачам не блокувати одне одного, але блокуватися з записом.

#Sample 03.1.1

Мютекс має покривати мінімальну область, необхідну для виконання синхронізації. Використання захоплення на більшій частині знизить очікуваний приріст в швидкодії. В найгіршому випадку перевага втратиться зовсім. Гарним правилом буде один мютекс на один ресурс для мінімального покриття.

3.2.
Семафор як такий з'явився лише в С++20, але в pthread та в winapi був присутній набагато раніше.
В основі семафора є лічильник. aquire() зменшує на одиницю, якщо це можливо, тобто поточне значення більше нуля, інакше блокується.
release() збільшує лічильник на одиницю, такм чином може розблокувати потік, який до того не зміг захопити ресурс.

На співбесідах я питаю про різницю між семафором і мютексом часто можна почути що семафор, на відміну від мютекса, дає можливість локати декількома потоками одночасно. Це правда, але це не єдина і на мій погляд не головна різниця. Більш важливим є те, що порядок виклику методів не обов'язково має бути парним, а також розблоковувати семафор може інший потік, не обов'язково той, що захоплював. Також семафору явно задається початкове значення лічильника. При використання семафора з лічильником ініціалізованим нулем перше захоплення буде блокуючим, на відміну від мютекса, де перше захоплення завжди успішне. 

Якщо семафор ініціалізувати в одиницю і використовувати парами acquire()/release(), то поведінка бцде ідентична мютексу. Відповідно при заданні початкового лічмльника більшим числом в синхронізований шматок кодну одночасно зможуть виконувати декілька потоків, що аналогічно ситуації з групою, яка має декілька talking stick. Це доволі неочевидна перевага і на практиці використовуюється рідко.

В ситуації коли початкове значення задане нульове, потік що викликав acquire() по суті буде чекати поки не відбудеться release() з іншого потоку. Це буде схоже на сигналювання прапорцем з коли один потік дозволяє іншому продовжити роботу. Як правило це означатиме що попередня таска буда виконана і можна продовжувати роботу. Часто це позуміють як співвідношення producer/consumerю
В цій схемі потік, що захоплює семафор, зазвичай не буде його відпускати.

Така схема "wait for signal" буде радше основним призначенням, що і слідує зі значення слова семафор, що походить з грецької і означає той, що несе сигнал.
Це використовуватиметься частіше в контексті producer-consumer взаємодії.

В С++ ця ситуація розділена явно, і в С++20 синтаксично розділяють std::counting_semaphore i std::binary_semaphore, хоча реалізація необов'язково відрізняється.

counting_semaphore можна використовувати наприклад для очікування завершення всіх N задач, але для цього краще std::latch, низхідний каунтер.

binary/counting semaphore

3.3. condition variable
Як видно з назви, мова йде про очікування настання певної умови, і має багато спільного з семафором. 
Також присутня в pthread і в winapi
condition variable можна вважати генералізованим семафором в режимі wait_for_signal. Це одна з причин, чому семафора не було в 11 стандарті. Синтаксично conditional variable використовується в парі з мютексом. Мютекс відповідає за блокування, бо очевидно це багатопоточний контекст, а condition variable відповідає за очікування нотифікації і перевірку умови.
В плані використання це очевидний кейс producer consumer взаємозв'язку.

#Sample 04.4.1 

3.4. std::future
future це одноразова С++11 шаблонна обгортка над типом з флажком готовності. Відповідно має метод wait() що блокує виконання до настання готовності. В нативних API такого примітиву немає і подібна поведінка симулювалася семафором або кондварою.

Сама по собі std::future не можлива і існує в контексті std::async, std::packaged_task або std::promise

- std::packaged_task - це конструкція, яка зв'язує функцію, що повертає значення з std::promise, в який буде записаний результат і активований прапорець готовності.

- std::async - це функція, яка робить аналогічне зв'язування але разом з тим запускає функцію на виконання в іншому потоці.

- std::promise це ще одна обгортка, яка дозволяє встановити результат явно, себто вручну. Відповідно має бути також вручну передана в потік, який буде встановлювати значення

std::shared_future - це майже те саме що і future, але з однією відмінністю, де на реультат може очікувати декілька потоків. З простої можна зробити загальну через метод share()


3.5 lock guard.
Для зменшення кількості помилок при розблокуванні елементів синхронізації доцільно використовувати допоміжні локи. Це RAII обгортки, які роблять автоматичне захоплюють та відпускання цих елементів.

неочевидне місце де допоможе лок гард - break/continue в циклі.


std::lock_guard​ - найпростіший з допоміжних локів, робить лок в конструкторі і анлок в деструкторі. Опціонально є конструктор без локу.

std::unique_lock​

std::shared_lock​

std::scoped_lock





5. std::atomic
std::atomic це атомарний об'єкт, точніше це обгортка над об'єктом з встроєним мютексом, а починаючи з 20 стандарту по суті конд варою. Але найцікавіше це атомарність простих типів, і тоді частіше вживають термін атомарні операції. Це є фактичним використання атомарних інструкцій процесора, тобто синхронізація забезпечується не операційною системою а саме процессором, що очевидно буде суттєво швидше. Також елементарно менше писати коду.

compare_exchange гарно підходить для статусу стейт машини.
Мютекс цілком можна вважати тривіальною стейт машиною.

6. Synchronization problems

6.1. Deadlock
Дедлок це ситуація коли один, декілька потоків чекають на доступ до елементу синхронізації, але через дефект програми цього вже не відбудеться. 
Знову ж на співбесідах часто розповідають про захоплення нахрест, коли перший потік захоплює спочатку перший м'ютекс, потім другий, а другий потік робить це в зворотному порядку, відповідно відбувається взаємне блокування. Так, це валідний кейс, але набагато частіше буде зустрічатися кейс коли елементарно забули розлочити синхрнонізацію, наприклад перед раннім ретюрном чи break або continue в циклі. Також частіше можливе повторне захоплення нерекурсивного мютекса одним і тим же потоком. Реальний випадок захоплення навхрест я честно бачив лише раз за 20 років.
Deadlock аналізується з дампу стеків потоку.
Sample?

6.2. Livelock
Лайвлок це також випадок коли програма перестає робити корисну роботу через некорректну синхронізацію, але при цьому потоки не блокуються на елементах синхронізації.
Мені трапився випадок коли через відсутність синхронізації зациклювався зв'язний список і програма відповідно опрацьовувала його нескінченно.
Sample?

6.3 inefective resource split

6.4. Priority inversion
Випадок коли високопріоритетна задача виконується одночасно з низькоприоритетною і використовує один і той же ресурс. Високопріоритетна задача починається в момент, коли низькопріоритетна вже захопила ресурс, і відповідно більш пріоритетна має чекати завершення менш пріоритетної.
Наприклад пише в примітивний лог з одним глобальним мютексом.


7. Patterns

7.1. thread_pool
Ціль в лімітуванні кількості одночасно виконуваних потоків. Якщо активних потоків більше ніж фізичних ядер, виконання цих потоків буде конкурувати за апаратні ресурси і час виконання усіх конкуруючих потоків буде збільшено відповідно на кількість часових проміжків відданих іншим процесам. Також більш часте переключення потоків також внесе свій кост. Одночасно для чутливих щодо живлення систем може мати місце обмеження максимально можливої загрузки процесора для зменшення споживання енергії та уникнення перегрівання процесора і супутніх систем.
Таким чином пул потоків матиме чергу задач і виконуватиме їх паралельно при наявності вільних потоків і послідовно коли всі потоки зайняті.

7.2. relationship
producer-consumer
Продюсер нотифікує коли робота завершена і консюмер може використовувати дані. Консюмер в свою чергу може виступати продюсером для наступного консюмера, формуючи поетапну обробку даних.
Продюсер консюмер це або конд вар, або футура, або семафор. 

reader writer - потоки можуть як писати в дані, так і читати з них. Взаємозв'язок між операціями не встановлюється. Тут найпростіший варіант - мютекс. При можливості декількох читачів - шаред мютекс.

7.3. local copy & double buffering

7.4. parallel job with portion

8. Metrics & Profiling

Key takeaways
1. Складне розуміння - малюйте карти потоків при проектуванні і профілюйте після. Підбирайте ефективні метрики.
2. Лотерея в репродюс - запускайте тести десятки і сотні тисяч разів.
3. Синхронізувати треба тільки найнеобхідніше. Аналізуйте очікування профілюванням і мінімізуйте синхронізацію.



Part II. Advanced Multithreading.

Memory ordering

Coroutines

Lock-free algorithms & data structures

std parallel?


